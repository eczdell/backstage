apiVersion: scaffolder.backstage.io/v1beta3
kind: Template
metadata:
  # name of template, convention is to use the repo name of the template
  name: Opshub-runway-eh-template
  # title for prettier display on the template catalog
  title: Opshub-runway-eh-template
  # description for prettier display on the template catalog
  description: software template for opshub runway eventhub integrations
  # list of string tags used on the Template catalog for search-ability
  tags: []
spec:
  owner: aa-opshub
  type: other

  parameters:
    - title: American Airlines Information
      required:
        - squad
        - cmdbAppShortName
        - aaId
      properties:
        squad:
          title: Squad
          ui:autofocus: true
          description: Squad360 Squad Name
          ui:field: SquadPickerFieldExtension
        cmdbAppShortName:
          title: App Shortname
          description: Archer Application Shortname
          ui:field: AppShortnamePickerFieldExtension
        aaId:
          title: AA ID
          description: AA Employee ID
          ui:field: AaEmployeeInformationFieldExtension
          ui:widget: hidden
    - title: Opshub Information
      required:
        - eventhubNamespace
        - reason
        - region
        - environment
        - throughput
        - criticality
        - isPiiData
        - servicePrinicpalType
      properties:
        eventhubNamespace:
          title: EventhubNameSpace Name
          type: string
          maxLength: 12
          description: Unique name of the eventhub namespace you want to create
        reason:
          title: Reason for creating EH
          type: string
          description: Please provide reason for creating this eventhub
        region:
          title: Region
          type: string
          enum:
            - 'East US'
            - 'West US'
          default: East US
          description: Region for EventhubNamespace east or west
        environment:
          title: Environment
          type: string
          enum:
            - 'DEV'
            - 'TEST'
          default: DEV
          description: Environment for EventhubNamespace dev or test
        throughput:
          title: Throughput
          type: integer
          ui:widget: range
          minimum: 1
          maximum: 40
          description: Please provide required throughput for creating this eventhub
        autoInflate:
          title: Auto-Inflate
          type: boolean
          default: false 
        criticality:
          title: Criticality
          type: string
          enum:
            - 'Vital'
            - 'Important'
            - 'Critical'
            - 'POC'
          description: Criticality of the application/Eventhub
        isPiiData:
          title: Any PII or PCI Data
          ui:widget: radio
          type: boolean
          default: false
          description: Does the data flow contain any PII or PCI Data?
        servicePrinicpalType:
            title:  ServicePrincipal Type
            type: string
            ui:widget: radio
            $ref: "#/definitions/servicePrinicpalType"
            description: Select either to send data to eventhubs or to receive data from eventuhubs
      definitions:
        servicePrinicpalType:
          title: servicePrinicpalType
          type: string
          anyOf:
            - type: string
              enum:
                - send
              title: Sender/Send Data to Eventhubs
            - type: string
              enum:
                - receive
              title: Receiver/receive Data from eventhubs
            -  type: string
               enum:
                 - both
               title: send and receive Data from eventhubs
      dependencies:
        servicePrinicpalType:
            oneOf:
              - properties:
                  servicePrinicpalType:
                    title:  Service Principal Type
                    type: string
                    ui:widget: radio
                    enum:
                      - send
                  servicePrincipalSenderID:
                    title: ServicePrincipalSenderID
                    type: array
                    items: {
                      type: object,
                      properties: {
                          senderID: {
                            type: string,
                            title: senderID
                          }
                      }            
                    }
                    default: NA
                    description: Please enter your ServicePrincipalID/ObjectID to send data to eventhub
              - properties:
                  servicePrinicpalType:
                    title:  Service Principal Type
                    type: string
                    ui:widget: radio
                    enum:
                      - receive
                  servicePrincipalReceiverID:
                    title: servicePrincipalReceiverID
                    type: array
                    items: {
                      type: object,
                      properties: {
                          receiverID: {
                            type: string,
                            title: receiverID
                          }
                      }            
                    }
                    default: NA
                    description: Please enter your ServicePrincipalID/ObjectID to receive data to eventhub
              - properties:
                  servicePrinicpalType:
                    title:  Service Principal Type
                    type: string
                    ui:widget: radio
                    enum:
                      - both
                  servicePrincipalID:
                    title: servicePrincipalID
                    type: array
                    items: {
                      type: object,
                      properties: {
                          senderObjectID: {
                            type: string,
                            title: senderObjectID
                          },
                          receiverObjectID: {
                            type: string,
                            title: receiverObjectID
                          },
                      },
                      required: ["senderObjectID","receiverObjectID"],            
                    }
                    description: Please enter your ServicePrincipalID/ObjectID to send/receive data to eventhub
    - title: Topics Information
      required:
        - topicsList
      properties:
        topicsList:
            type: array
            items: {
              type: object,
              properties: {
                  topicName: {
                    type: string,
                    title: Topic name
                  },
                  partitionCount: {
                     title: Partition Count,
                     type: integer,
                     ui:widget: range,
                     minimum: 1,
                     maximum: 8,
                     description: If you need more than 8 Partitions, Please open a ticket with opshub ticket counter
                  },
                  messageRetention: {
                    type: string,
                    title: Message Retention,
                    default: "1",
                    ui:disabled: true
                  }
              }            
            }
            description: Enter required topic names, their respective partition counts and message retention
    - title: Escalation Information
      required:
        - squadDL_email
      properties:
        squadDL_email:
          title: AA Squad DL email
          type: string
          pattern: "^[a-zA-Z0-9]([._]?[a-zA-Z0-9]){2,}@[aA]{2}.[comCOM]{3}$"
          description: Client's Email or Distribution List for escalation/communication purposes
        
    ## Uncomment section below to deploy to kubernetes
    # - title: Deployment Information
    #   required:
    #     - cluster
    #     - containerName
    #     - containerTag
    #     - containerPort
    #     - autoTriggerFirstRelease
    #     - createIngress
    #   properties:
    #     cluster:
    #       title: Cluster
    #       description: Kubernetes Cluster
    #       ui:field: KubernetesClusterPickerFieldExtension
    #     containerName:
    #       title: Container Name
    #       type: string
    #       pattern: '^[a-z][a-z0-9-\/]{3,28}[a-z0-9]$'
    #       description: Name of the container saved to Artifactory
    #     containerTag:
    #       title: Container Tag
    #       type: string
    #       default: 0.0.1
    #       pattern: '^(\d+\.)?(\d+\.)?(\*|\d+)$'
    #       description: Tag or Version of the container saved to Artifactory
    #     containerPort:
    #       title: Container Port
    #       type: integer
    #       minimum: 0
    #       maximum: 65535
    #       default: 8100
    #       description: Port of the container saved to Artifactory
    #     autoTriggerFirstRelease:
    #       title: Create Inital Release
    #       type: boolean
    #       default: true
    #       description: Port of the container saved to Artifactory
    #     createIngress:
    #       title: Create Ingress
    #       type: string
    #       ui:widget: radio
    #       ui:options:
    #         inline: true
    #       enum:
    #         - 'AKS Public'
    #         - 'None'
    #       default: AKS Public
    #       description: Create an ingress

  steps:
    - id: fetch
      name: Template Skeleton
      action: fetch:template
      input:
        url: ./skeleton
        # Ensure that all inputted parameters are listed below
        values:
          name: ${{ parameters.name }}
          description: ${{ parameters.description }}
          githubOwner: ${{ parameters.githubOwner }}
          eventhubNamespace: ${{ parameters.eventhubNamespace }}
          reason: ${{ parameters.reason }}
          region: ${{ parameters.region }}
          envName: ${{parameters.environment}} 
          servicePrincipalIDList: ${{parameters.servicePrincipalID}}
          servicePrincipalSenderIDList: ${{parameters.servicePrincipalSenderID}}
          servicePrincipalReceiverIDList: ${{parameters.servicePrincipalReceiverID}}
          clientName: ${{parameters.clientName}}
          topicsList: ${{parameters.topicsList}}
          resourceGroup: aa-aot-opshub_eventhub_clients-dev-eastus-rg
          ## Add used parameters below
          # containerName: ${{ parameters.containerName }}
          squad: ${{ parameters.squad }}
          cmdbAppShortName: ${{ parameters.cmdbAppShortName.shortName }}
          cmdbAppArcherId: ${{parameters.cmdbAppShortName.archerId}}
          cmdbAppCostCenter: ${{parameters.cmdbAppShortName.costCenter}}
          aa_eid: ${{ parameters.aaId }}
          throughput: ${{parameters.throughput}}
          criticality: ${{parameters.criticality}}
          autoInflate: ${{parameters.autoInflate}}
          isPiiData: ${{parameters.isPiiData}}
          # containerTag: ${{ parameters.containerTag }}
          # containerPort: ${{ parameters.containerPort }}
          # autoTriggerFirstRelease: ${{ parameters.autoTriggerFirstRelease }}
          # createIngress: ${{ parameters.createIngress }}

    ## Include this step if you wish to create a GitHub repo
    - id: publish
      name: Publish
      action: publish:github
      input:
        access: 'AAInternal/OpshubRunway'
        allowedHosts: ['github.com']
        description: This is OH_Runway_${{ parameters.eventhubNamespace }}
        repoUrl: github.com?repo=OH_Runway_${{ parameters.eventhubNamespace }}&owner=AAInternal
        repoVisibility: internal
        requireCodeOwnerReviews: true
        defaultBranch: main
        topics: ['runway-generated', 'opshub-runway-eh']

    - id: create_github_environment
      name: Create GitHub Environment
      action: github:environments:create
      input:
        repoUrl: github.com?repo=OH_Runway_${{ parameters.eventhubNamespace }}&owner=AAInternal
        environmentName: ${{parameters.environment}}

    - id: create_github_environment
      name: Create GitHub Environment - apply
      action: github:environments:create
      input:
        repoUrl: github.com?repo=OH_Runway_${{ parameters.eventhubNamespace }}&owner=AAInternal
        environmentName: ${{parameters.environment}}-apply

    - id: copy-secrets-job
      name: Sync secrets
      action: github:actions:dispatch
      input:
        repoUrl: github.com?repo=opshub_common_gha_cloud&owner=AAInternal
        workflowId: sync_secrets_runway.yml
        branchOrTagName: master
        workflowInputs: 
          environment: ${{parameters.environment}}
          artifact_id: ${{ parameters.eventhubNamespace }}
    
    - id: copy-secrets-job
      name: Sync secrets - apply env
      action: github:actions:dispatch
      input:
        repoUrl: github.com?repo=opshub_common_gha_cloud&owner=AAInternal
        workflowId: sync_secrets_runway.yml
        branchOrTagName: master
        workflowInputs: 
          environment: ${{parameters.environment}}-apply
          artifact_id: ${{ parameters.eventhubNamespace }}

    - id: opshub-approval-email
      name: opshub-approval-email-request
      action: github:actions:dispatch
      input:
        repoUrl: github.com?repo=opshub_common_gha_cloud&owner=AAInternal
        workflowId: runway-send-approval-email.yml
        branchOrTagName: master
        workflowInputs: 
          eventhubNamespaceName: ${{parameters.eventhubNamespace}}
          reason: ${{ parameters.reason }}
          userName: ${{ parameters.aaId }}
          teamName: ${{ parameters.cmdbAppShortName.shortName }}
          region: ${{parameters.environment}}-${{ parameters.region }}

    ## Include this step if you wish to add the generated component to the Runway catalog
    # - id: register
    #   name: Register
    #   action: catalog:register
    #   input:
    #     repoContentsUrl: ${{ steps.publish.output.repoContentsUrl }}
    #     catalogInfoPath: '/catalog-info.yaml'

    ## Include this step if you are deploying to kubernetes
    # - id: create-argocd-resources
    #   name: Create ArgoCD Resources
    #   action: argocd:create-resources
    #   input:
    #     appName: ${{ parameters.name | lower | replace("_", "-") }}-nonprod
    #     argoInstance: ${{ parameters.cluster.cluster }}
    #     namespace: ${{ parameters.cluster.namespace }}
    #     repoUrl: ${{ steps.publish.output.remoteUrl }}
    #     path: 'k8s/nonprod'

    ## Optionally include this step to add the produced application/component to the catalog
    ## Must have a catalog-info.yaml file
    # - id: create_release
    #   name: Create Release
    #   action: github:actions:dispatch
    #   if: '${{ parameters.autoTriggerFirstRelease }}'
    #   input:
    #     repoUrl: github.com?repo=${{ parameters.name }}&owner=AAInternal
    #     workflowId: trigger_first_release.yml
    #     branchOrTagName: main

  output:
    links:
      - title: Repository
        url: ${{ steps.publish.output.remoteUrl }}
        # uncomment if you want to register to the catalog
#       - title: Open in catalog
#         icon: 'catalog'
#         entityRef: ${{ steps.register.output.entityRef }}